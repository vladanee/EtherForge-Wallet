import { CollectionBaseNftsResponse, CollectionNftsResponse, DeployResult, GetBaseNftsForCollectionOptions, GetBaseNftsForOwnerOptions, GetNftFloorPriceResponse, GetNftsForCollectionOptions, GetNftsForOwnerOptions, GetOwnersForCollectionResponse, GetOwnersForNftResponse, NftTokenType, OwnedBaseNft, OwnedBaseNftsResponse, OwnedNft, OwnedNftsResponse } from '../types/types';
import { Alchemy } from './alchemy';
import { BaseNft, BaseNftContract, Nft, NftContract } from './nft';
import { BigNumberish } from '@ethersproject/bignumber';
/**
 * Get the NFT metadata associated with the provided parameters.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @param contractAddress - The contract address of the NFT.
 * @param tokenId - Token id of the NFT.
 * @param tokenType - Optionally specify the type of token to speed up the query.
 * @public
 */
export declare function getNftMetadata(alchemy: Alchemy, contractAddress: string, tokenId: BigNumberish, tokenType?: NftTokenType): Promise<Nft>;
/**
 * Get the NFT metadata associated with the provided Base NFT.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @param baseNft - The base NFT object to be used for the request.
 * @public
 */
export declare function getNftMetadata(alchemy: Alchemy, baseNft: BaseNft): Promise<Nft>;
/**
 * Get the NFT collection metadata associated with the provided parameters.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @param contractAddress - The contract address of the NFT.
 * @public
 */
export declare function getNftContractMetadata(alchemy: Alchemy, contractAddress: string): Promise<NftContract>;
/**
 * Get the NFT metadata associated with the provided Base NFT.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @param baseNftContract - The base NFT contract object to be used for the request.
 * @public
 */
export declare function getNftContractMetadata(alchemy: Alchemy, baseNftContract: BaseNftContract): Promise<NftContract>;
/**
 * Fetches all NFTs for a given owner and yields them in an async iterable.
 *
 * This method returns the full NFT for the owner and pages through all page
 * keys until all NFTs have been fetched.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @param owner - The address of the owner.
 * @param options - The optional parameters to use for the request.
 * @public
 */
export declare function getNftsForOwnerIterator(alchemy: Alchemy, owner: string, options?: GetNftsForOwnerOptions): AsyncIterable<OwnedNft>;
/**
 * Fetches all NFTs for a given owner and yields them in an async iterable.
 *
 * This method returns the base NFTs that omit the associated metadata and pages
 * through all page keys until all NFTs have been fetched.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @param owner - The address of the owner.
 * @param options - The optional parameters to use for the request.
 * @public
 */
export declare function getNftsForOwnerIterator(alchemy: Alchemy, owner: string, options?: GetBaseNftsForOwnerOptions): AsyncIterable<OwnedBaseNft>;
/**
 * Get all NFTs for an owner.
 *
 * This method returns the full NFTs in the contract. To get all NFTs without
 * their associated metadata, use {@link GetBaseNftsForOwnerOptions}.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @param owner - The address of the owner.
 * @param options - The optional parameters to use for the request.
 * @public
 */
export declare function getNftsForOwner(alchemy: Alchemy, owner: string, options?: GetNftsForOwnerOptions): Promise<OwnedNftsResponse>;
/**
 * Get all base NFTs for an owner.
 *
 * This method returns the base NFTs that omit the associated metadata. To get
 * all NFTs with their associated metadata, use {@link GetNftsForOwnerOptions}.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @param owner - The address of the owner.
 * @param options - The optional parameters to use for the request.
 * @public
 */
export declare function getNftsForOwner(alchemy: Alchemy, owner: string, options?: GetBaseNftsForOwnerOptions): Promise<OwnedBaseNftsResponse>;
/**
 * Get all NFTs for a given contract address.
 *
 * This method returns the full NFTs in the contract. To get all NFTs without
 * their associated metadata, use {@link GetBaseNftsForCollectionOptions}.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @param contractAddress - The contract address of the collection.
 * @param options - The parameters to use for the request. or
 *   {@link CollectionNftsResponse} response.
 * @beta
 */
export declare function getNftsForCollection(alchemy: Alchemy, contractAddress: string, options?: GetNftsForCollectionOptions): Promise<CollectionNftsResponse>;
/**
 * Get all base NFTs for a given contract address.
 *
 * This method returns the base NFTs that omit the associated metadata. To get
 * all NFTs with their associated metadata, use {@link GetNftsForCollectionOptions}.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @param contractAddress - The contract address of the collection.
 * @param options - The optional parameters to use for the request.
 * @beta
 */
export declare function getNftsForCollection(alchemy: Alchemy, contractAddress: string, options?: GetBaseNftsForCollectionOptions): Promise<CollectionBaseNftsResponse>;
/**
 * Gets all the owners for a given NFT contract address and token ID.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @param contractAddress - The NFT contract address.
 * @param tokenId - Token id of the NFT.
 * @beta
 */
export declare function getOwnersForNft(alchemy: Alchemy, contractAddress: string, tokenId: BigNumberish): Promise<GetOwnersForNftResponse>;
/**
 * Gets all the owners for a given NFT.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @param nft - The NFT object to get the owners for.
 * @beta
 */
export declare function getOwnersForNft(alchemy: Alchemy, nft: BaseNft): Promise<GetOwnersForNftResponse>;
/**
 * Gets all the owners for a given NFT collection.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @param contractAddress - The NFT collection to get the owners for.
 * @beta
 */
export declare function getOwnersForCollection(alchemy: Alchemy, contractAddress: string): Promise<GetOwnersForCollectionResponse>;
/**
 * Gets all the owners for a given NFT collection.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @param nft - The NFT to get the owners of the collection for.
 * @beta
 */
export declare function getOwnersForCollection(alchemy: Alchemy, nft: BaseNft): Promise<GetOwnersForCollectionResponse>;
/**
 * Fetches all NFTs for a given contract address and yields them in an async iterable.
 *
 * This method returns the full NFTs in the contract and pages through all page
 * keys until all NFTs have been fetched. To get all NFTs without their
 * associated metadata, use {@link GetBaseNftsForCollectionOptions}.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @param contractAddress - The contract address of the collection.
 * @param options - The optional parameters to use for the request.
 * @beta
 */
export declare function getNftsForCollectionIterator(alchemy: Alchemy, contractAddress: string, options?: GetNftsForCollectionOptions): AsyncIterable<Nft>;
/**
 * Fetches all base NFTs for a given contract address and yields them in an
 * async iterable.
 *
 * This method returns the base NFTs that omit the associated metadata and pages
 * through all page keys until all NFTs have been fetched. To get all NFTs with
 * their associated metadata, use {@link GetNftsForCollectionOptions}.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @param contractAddress - The contract address of the collection.
 * @param options - The optional parameters to use for the request.
 * @beta
 */
export declare function getNftsForCollectionIterator(alchemy: Alchemy, contractAddress: string, options?: GetBaseNftsForCollectionOptions): AsyncIterable<BaseNft>;
/**
 * Checks that the provided owner address owns one of more of the provided NFTs.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @param owner - The owner address to check.
 * @param contractAddresses - An array of NFT contract addresses to check ownership for.
 * @beta
 */
export declare function checkNftOwnership(alchemy: Alchemy, owner: string, contractAddresses: string[]): Promise<boolean>;
/**
 * Returns whether a contract is marked as spam or not by Alchemy. For more
 * information on how we classify spam, go to our NFT API FAQ at
 * https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @param contractAddress - The contract address to check.
 * @beta
 */
export declare function isSpamNftContract(alchemy: Alchemy, contractAddress: string): Promise<boolean>;
/**
 * Returns a list of all spam contracts marked by Alchemy. For details on how
 * Alchemy marks spam contracts, go to
 * https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @beta
 */
export declare function getSpamNftContracts(alchemy: Alchemy): Promise<string[]>;
/**
 * Returns the floor prices of a NFT contract by marketplace.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @param contractAddress - The contract address for the NFT collection.
 * @beta
 */
export declare function getNftFloorPrice(alchemy: Alchemy, contractAddress: string): Promise<GetNftFloorPriceResponse>;
/**
 * Finds the address that deployed the provided contract and block number it was
 * deployed in.
 *
 * NOTE: This method performs a binary search across all blocks since genesis
 * and can take a long time to complete. This method is a convenience method
 * that will eventually be replaced by a single call to an Alchemy endpoint with
 * this information cached.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @param contractAddress - The contract address to find the deployer for.
 * @beta
 */
export declare function findContractDeployer(alchemy: Alchemy, contractAddress: string): Promise<DeployResult>;
/**
 * Refreshes the cached metadata for a provided NFT contract address and token
 * id. Returns a boolean value indicating whether the metadata was refreshed.
 *
 * This method is useful when you want to refresh the metadata for a NFT that
 * has been updated since the last time it was fetched. Note that the backend
 * only allows one refresh per token every 15 minutes, globally for all users.
 * The last refresh time for an NFT can be accessed on the
 * {@link Nft.timeLastUpdated} field.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @param contractAddress - The contract address of the NFT.
 * @param tokenId - The token id of the NFT.
 */
export declare function refreshNftMetadata(alchemy: Alchemy, contractAddress: string, tokenId: BigNumberish): Promise<boolean>;
/**
 * Refreshes the cached metadata for a provided NFT contract address and token
 * id. Returns a boolean value indicating whether the metadata was refreshed.
 *
 * This method is useful when you want to refresh the metadata for a NFT that
 * has been updated since the last time it was fetched. Note that the backend
 * only allows one refresh per token every 15 minutes, globally for all users.
 *
 * @param alchemy - The Alchemy SDK instance.
 * @param nft - The NFT to refresh the metadata for.
 */
export declare function refreshNftMetadata(alchemy: Alchemy, nft: BaseNft): Promise<boolean>;
